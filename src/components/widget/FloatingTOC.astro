---
import { Icon } from "astro-icon/components";
import type { MarkdownHeading } from "astro";
import { i18n } from "../../i18n/translation";
import I18nKey from "../../i18n/i18nKey";

interface Props {
  headings: MarkdownHeading[];
}

let { headings = [] } = Astro.props;

let minDepth = 10;
for (const heading of headings) {
  minDepth = Math.min(minDepth, heading.depth);
}
---

<!-- Tombol TOC mengambang -->
<div class="floating-toc-wrapper hidden lg:block">
  <div
    id="floating-toc-btn"
    class="floating-toc-btn hide flex items-center rounded-2xl overflow-hidden transition"
    onclick="toggleFloatingTOC()"
  >
    <button
      aria-label="Daftar Isi"
      class="h-[3.75rem] w-[3.75rem] rounded-2xl"
    >
      <Icon name="material-symbols:format-list-bulleted" class="mx-auto" />
    </button>
  </div>
</div>

<!-- Panel TOC mengambang -->
<div
  id="floating-toc-panel"
  class="floating-toc-panel hide fixed w-80 max-h-[24rem] overflow-hidden rounded-2xl shadow-2xl backdrop-blur-lg border border-white/20 bg-white/60 dark:bg-black/60 dark:border-white/10 z-50"
  style="background-color: rgba(var(--card-bg-rgb, 255, 255, 255), 0.6); bottom: calc(13rem + 6rem); right: 2rem;"
>
  <div
    class="p-4 border-b border-gray-200 dark:border-gray-700 sticky top-0 backdrop-blur-sm z-10"
    style="background-color: rgba(var(--card-bg-rgb, 255, 255, 255), 0.6);"
  >
    <div class="flex items-center justify-between">
      <h3
        class="text-lg font-bold text-[var(--primary)] flex items-center gap-2"
      >
        {i18n(I18nKey.tableOfContents)}
      </h3>
      <button
        onclick="toggleFloatingTOC()"
        aria-label="Tutup TOC"
        class="btn-plain rounded-lg h-8 w-8 active:scale-90"
      >
        <Icon name="material-symbols:close" class="text-lg" />
      </button>
    </div>
  </div>

  <div class="p-4" style="overflow-y: auto; max-height: calc(24rem - 5rem);">
    <div
      class="toc-content"
      id="floating-toc-content"
      style="width: 100%; max-width: 100%;"
    >
      <!-- Konten TOC akan dibuat secara dinamis oleh JavaScript -->
    </div>
  </div>
</div>

<style lang="stylus">
.floating-toc-wrapper
	width: 3.75rem
	height: 3.75rem
	position: absolute
	right: 0
	top: 0
	pointer-events: none

.floating-toc-btn
	color: var(--primary)
	font-size: 2.25rem
	font-weight: bold
	border: none
	position: fixed
	bottom: 13rem
	right: 2rem
	opacity: 1
	cursor: pointer
	pointer-events: auto
	z-index: 1000
	transition: all 0.3s ease
	border-radius: 1rem
	backdrop-filter: blur(12px)
	background-color: var(--card-bg)
	border: 1px solid rgba(0, 0, 0, 0.1)
	
	&.hide
		transform: scale(0.9)
		opacity: 0
		pointer-events: none
		
	&:active
		transform: scale(0.9)
		
	&:hover
		transform: scale(1.05)
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15)
		background-color: rgba(255, 255, 255, 0.95)
		border-color: rgba(0, 0, 0, 0.2)

/* Gaya tema gelap */
:global(.dark) .floating-toc-btn
	background-color: var(--card-bg)
	border: 1px solid rgba(255, 255, 255, 0.15)
	color: var(--primary, #60a5fa)
	
	&:hover
		background-color: var(--card-bg)
		border-color: rgba(255, 255, 255, 0.3)
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3)

.floating-toc-panel
	transition: all 0.3s ease
	transform: translateY(20px)
	opacity: 0
	pointer-events: none
	overflow: hidden
	box-sizing: border-box
	backdrop-filter: blur(20px)
	-webkit-backdrop-filter: blur(20px)
	
	&.show
		transform: translateY(0)
		opacity: 1
		pointer-events: auto
		
	&.hide
		transform: translateY(20px)
		opacity: 0
		pointer-events: none

.toc-content
	display: flex
	flex-direction: column
	gap: 2px
	position: relative
	overflow: hidden
	width: 100%
	max-width: 100%
	box-sizing: border-box
	contain: layout
	align-items: flex-start

/* Gunakan gaya yang sama dengan TOC lama */
.toc-content a
	display: flex
	align-items: center
	text-decoration: none
	color: inherit
	border-radius: 0.75rem
	transition: all 0.2s ease
	width: 100%
	min-width: 0
	flex-shrink: 0
	max-width: 100%
	overflow: hidden
	box-sizing: border-box
	position: relative
	
	&:hover
		background: var(--toc-btn-hover)
		
	&.visible
		background: var(--toc-btn-active)

/* Pastikan konten teks tidak meluap */
.toc-content a div:last-child
	overflow: hidden
	text-overflow: ellipsis
	white-space: nowrap
	min-width: 0
	flex: 1
	max-width: calc(100% - 2rem)
	box-sizing: border-box

/* Lebar tetap wadah lencana */
.toc-content a div:first-child
	flex-shrink: 0
	width: 1.25rem
	height: 1.25rem

/* Gaya indikator aktif */
#floating-active-indicator
	position: absolute
	left: 0
	right: 0
	background: var(--toc-btn-hover)
	border-radius: 0.75rem
	transition: all 0.2s ease
	z-index: -1

/* Penyesuaian responsif */
@media (max-width: 1024px)
	.floating-toc-btn
		right: 1rem
		bottom: 10rem
		
	.floating-toc-panel
		right: 1rem !important
		bottom: calc(10rem + 4rem) !important
		width: calc(100vw - 2rem)
		max-width: 20rem
		max-height: 20rem

@media (max-width: 768px)
	.floating-toc-btn
		right: 0.75rem
		bottom: 8rem
		width: 3rem
		height: 3rem
		font-size: 1.5rem
		border-radius: 0.75rem
		
	.floating-toc-panel
		right: 0.75rem !important
		bottom: calc(8rem + 4rem) !important
		width: calc(100vw - 1.5rem)
		max-width: 18rem
		max-height: 18rem

@media (max-width: 480px)
	.floating-toc-btn
		right: 0.5rem
		bottom: 7rem
		width: 2.5rem
		height: 2.5rem
		font-size: 1.25rem
		border-radius: 0.5rem
		
	.floating-toc-panel
		right: 0.5rem !important
		bottom: calc(7rem + 4rem) !important
		width: calc(100vw - 1rem)
		max-width: 16rem
		max-height: 16rem

/* Adaptasi rasio piksel tinggi */
@media (min-resolution: 2dppx)
	.floating-toc-btn
		right: max(0.5rem, 2rem - 2vw)
		bottom: max(12rem, 16rem - 5vh)
		
	.floating-toc-panel
		right: max(0.5rem, 2rem - 2vw) !important
		bottom: calc(max(12rem, 16rem - 5vh) + 6rem) !important

/* Adaptasi layar super kecil */
@media (max-width: 360px)
	.floating-toc-btn
		right: 0.25rem
		bottom: 6rem
		width: 2rem
		height: 2rem
		font-size: 1rem
		border-radius: 0.375rem
		
	.floating-toc-panel
		right: 0.25rem !important
		bottom: calc(6rem + 4rem) !important
		width: calc(100vw - 0.5rem)
		max-width: 14rem
		max-height: 12rem

/* Adaptasi mode lanskap */
@media (orientation: landscape) and (max-height: 500px)
	.floating-toc-btn
		bottom: 4rem
		right: 0.5rem
		
	.floating-toc-panel
		bottom: calc(4rem + 4rem) !important
		right: 0.5rem !important
		max-height: 12rem

/* Pastikan tombol selalu terlihat */
.floating-toc-btn
	min-width: 2rem
	min-height: 2rem
	padding: 0.25rem
	max-width: 4rem
	max-height: 4rem
	border-radius: 1rem !important

/* Optimasi layar DPI tinggi */
@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)
	.floating-toc-btn
		image-rendering: -webkit-optimize-contrast
		image-rendering: crisp-edges

/* Adaptasi resolusi sangat rendah */
@media (max-width: 320px)
	.floating-toc-btn
		right: 0.125rem
		bottom: 5rem
		width: 1.75rem
		height: 1.75rem
		font-size: 0.875rem
		border-radius: 0.25rem
		
	.floating-toc-panel
		right: 0.125rem !important
		bottom: calc(5rem + 4rem) !important
		width: calc(100vw - 0.25rem)
		max-width: 12rem
		max-height: 14rem

/* Pastikan tombol ditampilkan dengan benar di dalam wadah */
.floating-toc-wrapper
	overflow: visible
	z-index: 999

/* Status aktif tombol */
.floating-toc-btn:active
	transform: scale(0.95)

/* Gaya scrollbar */
.floating-toc-panel::-webkit-scrollbar
	width: 6px

.floating-toc-panel::-webkit-scrollbar-track
	background: transparent
	border-radius: 3px

.floating-toc-panel::-webkit-scrollbar-thumb
	background: linear-gradient(180deg, rgba(0, 0, 0, 0.1) 0%, rgba(0, 0, 0, 0.2) 100%)
	border-radius: 3px
	border: 1px solid rgba(255, 255, 255, 0.1)
	transition: all 0.2s ease

.floating-toc-panel::-webkit-scrollbar-thumb:hover
	background: linear-gradient(180deg, rgba(0, 0, 0, 0.2) 0%, rgba(0, 0, 0, 0.3) 100%)
	border-color: rgba(255, 255, 255, 0.2)
	transform: scaleX(1.2)

.floating-toc-panel::-webkit-scrollbar-thumb:active
	background: linear-gradient(180deg, rgba(0, 0, 0, 0.3) 0%, rgba(0, 0, 0, 0.4) 100%)

/* Efek semi-transparan tema gelap */
:global(.dark) .floating-toc-panel
	background-color: rgba(0, 0, 0, 0.6) !important
	backdrop-filter: blur(20px)
	-webkit-backdrop-filter: blur(20px)

:global(.dark) .floating-toc-panel .p-4
	background-color: rgba(0, 0, 0, 0.8) !important

/* Scrollbar tema gelap */
:global(.dark) .floating-toc-panel::-webkit-scrollbar-thumb
	background: linear-gradient(180deg, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0.2) 100%)
	border: 1px solid rgba(0, 0, 0, 0.1)

:global(.dark) .floating-toc-panel::-webkit-scrollbar-thumb:hover
	background: linear-gradient(180deg, rgba(255, 255, 255, 0.2) 0%, rgba(255, 255, 255, 0.3) 100%)
	border-color: rgba(0, 0, 0, 0.2)

:global(.dark) .floating-toc-panel::-webkit-scrollbar-thumb:active
	background: linear-gradient(180deg, rgba(255, 255, 255, 0.3) 0%, rgba(255, 255, 255, 0.4) 100%)

/* Gaya scrollbar Firefox */
.floating-toc-panel
	scrollbar-width: thin
	scrollbar-color: rgba(0, 0, 0, 0.2) transparent

:global(.dark) .floating-toc-panel
	scrollbar-color: rgba(255, 255, 255, 0.2) transparent
</style>

<script is:raw is:inline>
  if (typeof window.floatingTOCBtn === "undefined") {
    window.floatingTOCBtn = null;
    window.floatingTOCPanel = null;
    window.tocItems = [];
    window.activeHeadingId = "";
    window.observer = null;
    window.minDepth = 10;
    window.maxLevel = 3; // Tampilkan 3 level judul secara default
    window.scrollTimeout = null; // Timer throttling scroll
  }

  // Gunakan variabel global untuk menghindari deklarasi berulang
  floatingTOCBtn = window.floatingTOCBtn;
  floatingTOCPanel = window.floatingTOCPanel;
  tocItems = window.tocItems;
  activeHeadingId = window.activeHeadingId;
  observer = window.observer;
  minDepth = window.minDepth;
  maxLevel = window.maxLevel;
  scrollTimeout = window.scrollTimeout;

  if (typeof window.toggleFloatingTOC === "undefined") {
    window.toggleFloatingTOC = function () {
      if (!floatingTOCBtn || !floatingTOCPanel) {
        return;
      }

      const isHidden = floatingTOCPanel.classList.contains("hide");

      if (isHidden) {
        floatingTOCPanel.classList.remove("hide");
        floatingTOCPanel.classList.add("show");
      } else {
        floatingTOCPanel.classList.remove("show");
        floatingTOCPanel.classList.add("hide");
      }
    };

    function updateActiveHeading() {
      // Langsung perbarui status aktif TOC, deteksi semua judul yang terlihat
      updateTOCActiveState();
    }

    function updateTOCActiveState() {
      if (!tocItems) return;

      // Hapus semua status aktif
      tocItems.forEach((item) => {
        item.classList.remove("visible");
      });

      // Dapatkan semua judul yang terlihat di layar
      const contentContainer =
        document.querySelector(".custom-md") ||
        document.querySelector(".prose") ||
        document.querySelector(".markdown-content");

      if (!contentContainer) return;

      const headings = contentContainer.querySelectorAll(
        "h1, h2, h3, h4, h5, h6"
      );
      const scrollTop = window.scrollY;
      const windowHeight = window.innerHeight;
      const offset = 100;

      // Temukan semua judul yang terlihat di layar
      const visibleHeadingIds = [];
      headings.forEach((heading) => {
        if (heading.id) {
          const rect = heading.getBoundingClientRect();
          const isVisible = rect.top < window.innerHeight && rect.bottom > 0;

          if (isVisible) {
            visibleHeadingIds.push(heading.id);
          }
        }
      });

      // Jika tidak ada judul yang terlihat, pilih judul yang paling dekat dengan bagian atas layar
      if (visibleHeadingIds.length === 0 && headings.length > 0) {
        let closestHeading = null;
        let minDistance = Infinity;

        headings.forEach((heading) => {
          if (heading.id) {
            const rect = heading.getBoundingClientRect();
            const distance = Math.abs(rect.top);

            if (distance < minDistance) {
              minDistance = distance;
              closestHeading = heading.id;
            }
          }
        });

        if (closestHeading) {
          visibleHeadingIds.push(closestHeading);
        }
      }

      // Temukan item TOC yang sesuai dan tambahkan status aktif
      const activeItems = tocItems.filter((item) => {
        const headingId = item.dataset.headingId;
        return visibleHeadingIds.includes(headingId);
      });

      // Tambahkan status aktif
      activeItems.forEach((item) => {
        item.classList.add("visible");
      });

      // Perbarui indikator aktif
      updateActiveIndicator(activeItems);
    }

    function updateActiveIndicator(activeItems) {
      const indicator = document.getElementById("floating-active-indicator");
      if (!indicator || !tocItems.length) return;

      if (activeItems.length === 0) {
        indicator.style.opacity = "0";
        return;
      }

      // Buat area indikator untuk setiap item aktif secara terpisah
      const tocContent = document.getElementById("floating-toc-content");
      const tocPanel = document.getElementById("floating-toc-panel");

      if (!tocContent || !tocPanel) return;

      const contentRect = tocContent.getBoundingClientRect();
      const panelRect = tocPanel.getBoundingClientRect();

      // Hitung rentang yang terlihat
      const visibleTop = Math.max(0, panelRect.top + 60); // Pertimbangkan tinggi header panel
      const visibleBottom = panelRect.bottom - 20; // Pertimbangkan margin bawah panel

      // Temukan semua item aktif yang terlihat
      const visibleActiveItems = [];
      activeItems.forEach((item) => {
        const itemRect = item.getBoundingClientRect();
        const itemTop = itemRect.top;
        const itemBottom = itemRect.bottom;

        // Periksa apakah item aktif berada dalam rentang yang terlihat
        if (itemTop < visibleBottom && itemBottom > visibleTop) {
          visibleActiveItems.push({
            element: item,
            top: itemTop - contentRect.top,
            bottom: itemBottom - contentRect.top,
          });
        }
      });

      if (visibleActiveItems.length === 0) {
        indicator.style.opacity = "0";
        return;
      }

      // Hitung posisi indikator, hanya membungkus item aktif yang terlihat
      const firstVisible = visibleActiveItems[0];
      const lastVisible = visibleActiveItems[visibleActiveItems.length - 1];

      const top = firstVisible.top;
      const height = lastVisible.bottom - firstVisible.top;

      indicator.style.top = `${top}px`;
      indicator.style.height = `${height}px`;
      indicator.style.opacity = "1";

      // Gulir otomatis ke item aktif
      const firstActive = activeItems[0];
      if (firstActive) {
        scrollToActiveItem(firstActive, tocContent, tocPanel);
      }
    }

    function scrollToActiveItem(activeItem, tocContent, tocPanel) {
      if (!activeItem || !tocContent) return;

      // Hapus timer sebelumnya
      if (scrollTimeout) {
        clearTimeout(scrollTimeout);
      }

      // Gunakan mekanisme throttling untuk menghindari pengguliran yang terlalu sering
      scrollTimeout = setTimeout(() => {
        // Gunakan metode scrollIntoView, lebih sederhana dan andal
        activeItem.scrollIntoView({
          behavior: "smooth",
          block: "center", // Gulir item aktif ke tengah area yang terlihat
          inline: "nearest",
        });
      }, 100); // Tunda 100ms
    }

    function setupIntersectionObserver() {
      // Hanya cari judul di dalam wadah konten artikel
      const contentContainer =
        document.querySelector(".custom-md") ||
        document.querySelector(".prose") ||
        document.querySelector(".markdown-content");

      if (!contentContainer) return;

      const headings = contentContainer.querySelectorAll(
        "h1, h2, h3, h4, h5, h6"
      );

      if (observer) {
        observer.disconnect();
      }

      observer = new IntersectionObserver(
        (entries) => {
          // Saat judul apa pun masuk atau keluar dari area yang terlihat, perbarui status TOC
          updateTOCActiveState();
        },
        {
          rootMargin: "0px 0px 0px 0px",
          threshold: 0,
        }
      );

      headings.forEach((heading) => {
        if (heading.id) {
          observer.observe(heading);
        }
      });
    }

    function isPostPage() {
      return (
        window.location.pathname.includes("/posts/") ||
        document.querySelector(".custom-md, .markdown-content") !== null
      );
    }

    function generateTOCContent() {
      const tocContent = document.getElementById("floating-toc-content");
      if (!tocContent) return;

      // Periksa apakah ini halaman artikel
      if (!isPostPage()) {
        // Jika bukan halaman artikel, sembunyikan TOC
        tocContent.innerHTML = "";
        return;
      }

      // Hanya cari judul di dalam wadah konten artikel
      const contentContainer =
        document.querySelector(".custom-md") ||
        document.querySelector(".prose") ||
        document.querySelector(".markdown-content");

      if (!contentContainer) {
        tocContent.innerHTML = "";
        return;
      }

      const headings = contentContainer.querySelectorAll(
        "h1, h2, h3, h4, h5, h6"
      );

      // Hitung kedalaman minimum
      let currentMinDepth = 10;
      headings.forEach((heading) => {
        const depth = parseInt(heading.tagName.charAt(1));
        currentMinDepth = Math.min(currentMinDepth, depth);
      });
      minDepth = currentMinDepth;
      window.minDepth = minDepth;

      const filteredHeadings = Array.from(headings).filter((heading) => {
        const depth = parseInt(heading.tagName.charAt(1));
        return depth < minDepth + maxLevel;
      });

      if (filteredHeadings.length === 0) {
        tocContent.innerHTML =
          '<div class="text-center py-8 text-gray-500 dark:text-gray-400"><p>Halaman ini tidak memiliki daftar isi</p></div>';
        return;
      }

      let tocHTML = "";
      let heading1Count = 1;
      filteredHeadings.forEach((heading) => {
        const depth = parseInt(heading.tagName.charAt(1));
        const depthClass =
          depth === minDepth
            ? ""
            : depth === minDepth + 1
              ? "pl-4"
              : "pl-8";
        const levelClass = `level-${depth}`;

        // Pastikan judul memiliki ID
        if (!heading.id) {
          return;
        }

        // Gunakan gaya lencana yang sama dengan TOC lama
        const badgeContent =
          depth === minDepth
            ? heading1Count++
            : depth === minDepth + 1
              ? '<div class="transition w-2 h-2 rounded-[0.1875rem] bg-[var(--toc-badge-bg)]"></div>'
              : '<div class="transition w-1.5 h-1.5 rounded-sm bg-black/5 dark:bg-white/10"></div>';

        tocHTML += `
         <a 
           href="#${heading.id}" 
           class="px-2 flex gap-2 relative transition w-full min-h-9 rounded-xl hover:bg-[var(--toc-btn-hover)] active:bg-[var(--toc-btn-active)] py-2 ${depthClass}"
           data-heading-id="${heading.id}"
           style="width: 100%; max-width: 100%; overflow: hidden; box-sizing: border-box; contain: layout;"
         >
           <div class="transition w-5 h-5 shrink-0 rounded-lg text-xs flex items-center justify-center font-bold ${depth === minDepth ? "bg-[var(--toc-badge-bg)] text-[var(--btn-content)]" : ""}" style="flex-shrink: 0; width: 1.25rem; height: 1.25rem; min-width: 1.25rem;">
             ${badgeContent}
           </div>
           <div class="transition text-sm ${depth <= minDepth + 1 ? "text-50" : "text-30"} flex-1 min-w-0 overflow-hidden text-ellipsis whitespace-nowrap" style="width: 0; flex: 1; max-width: calc(100% - 1.25rem - 0.5rem); box-sizing: border-box; contain: layout;">${(heading.textContent || "").replace(/#+\s*$/, "")}</div>
         </a>
       `;
      });

      tocContent.innerHTML =
        tocHTML +
        '<div id="floating-active-indicator" style="opacity: 0" class="-z-10 absolute bg-[var(--toc-btn-hover)] left-0 right-0 rounded-xl transition-all group-hover:bg-transparent border-2 border-[var(--toc-btn-hover)] group-hover:border-[var(--toc-btn-active)] border-dashed"></div>';
      tocItems = Array.from(
        document.querySelectorAll("#floating-toc-content a")
      );
      window.tocItems = tocItems;
    }

    function updateTOCVisibility() {
      // Periksa apakah ini halaman artikel
      if (!isPostPage()) {
        floatingTOCBtn.classList.add("hide");
        return;
      }

      // Selalu tampilkan tombol di halaman artikel
      floatingTOCBtn.classList.remove("hide");
    }

    function handleTOCClick(event) {
      const anchor = event.target.closest('a[href^="#"]');
      if (!anchor) return;

      // Tandai ini sebagai navigasi internal TOC untuk mencegah event lain menutup TOC
      window.tocInternalNavigation = true;

      event.stopPropagation(); // Hentikan penyebaran event
      event.preventDefault(); // Hentikan perilaku default

      // Dapatkan ID dari atribut href
      const href = anchor.getAttribute("href");
      const id = href ? href.substring(1) : "";
      const targetElement = document.getElementById(id);

      if (targetElement) {
        // Hitung posisi target, pertimbangkan tinggi bilah navigasi
        const navbarHeight = 80;
        const targetTop =
          targetElement.getBoundingClientRect().top +
          window.pageYOffset -
          navbarHeight;

        // Gulir mulus ke posisi target
        window.scrollTo({
          top: targetTop,
          behavior: "smooth",
        });
      }

      // Jangan tutup panel TOC setelah diklik, biarkan terbuka
    }

    function initFloatingTOC() {
      floatingTOCBtn = document.getElementById("floating-toc-btn");
      floatingTOCPanel = document.getElementById("floating-toc-panel");

      // Perbarui variabel global
      window.floatingTOCBtn = floatingTOCBtn;
      window.floatingTOCPanel = floatingTOCPanel;

      if (!floatingTOCBtn || !floatingTOCPanel) {
        return;
      }

      // Segera periksa apakah ini halaman artikel, jika tidak, segera sembunyikan tombol
      if (!isPostPage()) {
        floatingTOCBtn.classList.add("hide");
        return;
      }

      // Hasilkan konten TOC
      generateTOCContent();

      // Atur listener klik - gunakan mode capture untuk memastikan penanganan prioritas
      const tocContent = document.getElementById("floating-toc-content");
      if (tocContent) {
        tocContent.addEventListener("click", handleTOCClick, { capture: true });
      }

      // Atur listener scroll
      window.addEventListener("scroll", updateActiveHeading);

      // Atur intersection observer
      setupIntersectionObserver();

      // Inisialisasi status aktif
      updateActiveHeading();
      updateTOCVisibility();

      // Tunda pembaruan lagi untuk memastikan DOM sepenuhnya dirender
      setTimeout(() => {
        updateActiveHeading();
      }, 100);

      // Atur fungsionalitas tutup otomatis
      setupAutoClose();
    }

    // Tutup TOC secara otomatis saat halaman ditinggalkan
    function setupAutoClose() {
      // Fungsi umum untuk menutup TOC
      function closeTOC() {
        if (floatingTOCPanel && !floatingTOCPanel.classList.contains("hide")) {
          floatingTOCPanel.classList.add("hide");
          floatingTOCPanel.classList.remove("show");
        }
      }

      // Dengarkan event unload halaman
      window.addEventListener("beforeunload", closeTOC);

      // Dengarkan event hide halaman (seluler)
      document.addEventListener("visibilitychange", () => {
        if (document.hidden) {
          closeTOC();
        }
      });

      // Dengarkan perubahan rute (jika menggunakan SPA)
      window.addEventListener("popstate", closeTOC);

      // Dengarkan pergantian halaman Swup (jika menggunakan Swup)
      try {
        if (
          typeof window.swup !== "undefined" &&
          window.swup &&
          typeof window.swup.on === "function"
        ) {
          window.swup.on("pageView", closeTOC);
          window.swup.on("contentReplaced", closeTOC);
        }
      } catch (e) {
        // Swup tidak tersedia
      }

      // Dengarkan pergantian halaman Turbo (jika menggunakan Turbo)
      if (typeof window.Turbo !== "undefined" && window.Turbo) {
        document.addEventListener("turbo:visit", closeTOC);
        document.addEventListener("turbo:load", closeTOC);
      }

      // Dengarkan pergantian halaman Astro
      document.addEventListener("astro:page-load", closeTOC);
      document.addEventListener("astro:before-preparation", closeTOC);

      // Dengarkan klik tautan eksternal (tidak menangani tautan jangkar)
      document.addEventListener(
        "click",
        (e) => {
          const link = e.target.closest("a");
          if (link && link.href) {
            // Hanya tangani tautan eksternal, tautan jangkar tidak menutup TOC
            const href = link.getAttribute("href");
            const isExternalLink =
              href && !href.startsWith("#") && !href.startsWith("javascript:");

            if (!isExternalLink) {
              return;
            }

            // Periksa apakah yang diklik adalah tautan di dalam TOC
            const tocPanel = document.getElementById("floating-toc-panel");
            const tocContent = document.getElementById("floating-toc-content");

            if (
              tocPanel &&
              tocContent &&
              (tocPanel.contains(link) || tocContent.contains(link))
            ) {
              return;
            }

            // Periksa apakah ini navigasi internal TOC
            if (window.tocInternalNavigation) {
              return;
            }

            closeTOC();
          }
        },
        { capture: false }
      );

      // Dengarkan pengiriman formulir
      document.addEventListener("submit", (e) => {
        const form = e.target;
        if (form.action) {
          closeTOC();
        }
      });

      // Dengarkan saat halaman mulai di-unload
      window.addEventListener("pagehide", closeTOC);

      // Dengarkan perubahan visibilitas halaman (lebih andal)
      document.addEventListener("visibilitychange", () => {
        if (document.hidden) {
          closeTOC();
        }
      });

      // Dengarkan sebelum unload halaman
      window.addEventListener("unload", closeTOC);

      // Dengarkan event hashchange, tetapi kecualikan tautan jangkar internal TOC
      window.addEventListener("hashchange", (e) => {
        // Periksa apakah hashchange disebabkan oleh klik internal TOC
        if (window.tocInternalNavigation) {
          window.tocInternalNavigation = false; // Atur ulang flag
          return;
        }
        closeTOC();
      });

      // Dengarkan pushState dan replaceState (perubahan rute manual)
      const originalPushState = history.pushState;
      const originalReplaceState = history.replaceState;

      history.pushState = function (...args) {
        closeTOC();
        return originalPushState.apply(this, args);
      };

      history.replaceState = function (...args) {
        closeTOC();
        return originalReplaceState.apply(this, args);
      };

      // Dengarkan perubahan URL (metode paling andal)
      let currentUrl = window.location.href;
      const checkUrlChange = () => {
        if (window.location.href !== currentUrl) {
          // Periksa apakah perubahan URL disebabkan oleh navigasi internal TOC
          if (window.tocInternalNavigation) {
            currentUrl = window.location.href;
            return;
          }
          currentUrl = window.location.href;
          closeTOC();
        }
      };

      // Periksa perubahan URL secara berkala
      setInterval(checkUrlChange, 100);

      // Dengarkan perubahan fokus halaman - tetapi kecualikan perubahan fokus internal TOC
      window.addEventListener("blur", (e) => {
        // Periksa apakah ini navigasi internal TOC
        if (window.tocInternalNavigation) {
          return;
        }
        closeTOC();
      });

      // Dengarkan saat fokus hilang - tetapi kecualikan saat fokus beralih ke dalam TOC
      document.addEventListener("focusout", (e) => {
        // Periksa apakah fokus beralih ke dalam TOC
        const tocPanel = document.getElementById("floating-toc-panel");
        const tocContent = document.getElementById("floating-toc-content");
        const relatedTarget = e.relatedTarget;

        if (
          tocPanel &&
          tocContent &&
          relatedTarget &&
          (tocPanel.contains(relatedTarget) ||
            tocContent.contains(relatedTarget))
        ) {
          return;
        }

        // Periksa apakah ini navigasi internal TOC
        if (window.tocInternalNavigation) {
          return;
        }

        closeTOC();
      });
    }

    // Inisialisasi setelah halaman dimuat
    document.addEventListener("DOMContentLoaded", initFloatingTOC);

    // Jika halaman sudah dimuat, inisialisasi segera
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", initFloatingTOC);
    } else {
      initFloatingTOC();
    }

    // Dengarkan pergantian halaman (Swup)
    if (typeof window !== "undefined" && window.swup) {
      window.swup.hooks.on("visit:end", () => {
        setTimeout(() => {
          initFloatingTOC();
        }, 100);
      });
    } else if (typeof window !== "undefined") {
      document.addEventListener("swup:enable", () => {
        window.swup.hooks.on("visit:end", () => {
          setTimeout(() => {
            initFloatingTOC();
          }, 100);
        });
      });
    }
  }
</script>
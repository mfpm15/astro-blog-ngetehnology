---
export interface Props {
  text: string | string[];
  speed?: number;
  deleteSpeed?: number;
  pauseTime?: number;
  class?: string;
}

const {
  text,
  speed = 100,
  deleteSpeed = 50,
  pauseTime = 2000,
  class: className = "",
} = Astro.props;
const textData = Array.isArray(text) ? JSON.stringify(text) : text;
---

<span
  class={`typewriter ${className}`}
  data-text={textData}
  data-speed={speed}
  data-delete-speed={deleteSpeed}
  data-pause-time={pauseTime}></span>

<script>
  class TypewriterEffect {
    private element: HTMLElement;
    private texts: string[];
    private currentTextIndex: number = 0;
    private speed: number;
    private deleteSpeed: number;
    private pauseTime: number;
    private currentIndex: number = 0;
    private isDeleting: boolean = false;
    private timeoutId: number | null = null;

    constructor(element: HTMLElement) {
      this.element = element;
      const textData = element.dataset.text || "";

      // Coba parse sebagai array JSON, jika gagal, anggap sebagai string tunggal
      try {
        const parsed = JSON.parse(textData);
        this.texts = Array.isArray(parsed) ? parsed : [textData];
      } catch {
        this.texts = [textData];
      }

      this.speed = parseInt(element.dataset.speed || "100");
      this.deleteSpeed = parseInt(element.dataset.deleteSpeed || "50");
      this.pauseTime = parseInt(element.dataset.pauseTime || "2000");

      // Jika ada beberapa teks dan efek mesin tik tidak diaktifkan, tampilkan teks acak
      if (this.texts.length > 1 && !this.isTypewriterEnabled()) {
        this.showRandomText();
      } else {
        this.start();
      }
    }

    private isTypewriterEnabled(): boolean {
      // Periksa apakah ada atribut data terkait mesin tik
      return (
        this.element.dataset.speed !== undefined ||
        this.element.dataset.deleteSpeed !== undefined ||
        this.element.dataset.pauseTime !== undefined
      );
    }

    private showRandomText() {
      const randomIndex = Math.floor(Math.random() * this.texts.length);
      this.element.textContent = this.texts[randomIndex];
    }

    private start() {
      if (this.texts.length === 0) return;
      this.type();
    }

    private getCurrentText(): string {
      return this.texts[this.currentTextIndex] || "";
    }

    private type() {
      const currentText = this.getCurrentText();

      if (this.isDeleting) {
        // Hapus karakter
        if (this.currentIndex > 0) {
          this.currentIndex--;
          this.element.textContent = currentText.substring(
            0,
            this.currentIndex
          );
          this.timeoutId = window.setTimeout(
            () => this.type(),
            this.deleteSpeed
          );
        } else {
          // Selesai menghapus, beralih ke teks berikutnya
          this.isDeleting = false;
          this.currentTextIndex =
            (this.currentTextIndex + 1) % this.texts.length;
          this.timeoutId = window.setTimeout(() => this.type(), this.speed);
        }
      } else {
        // Tambah karakter
        if (this.currentIndex < currentText.length) {
          this.currentIndex++;
          this.element.textContent = currentText.substring(
            0,
            this.currentIndex
          );
          this.timeoutId = window.setTimeout(() => this.type(), this.speed);
        } else {
          // Selesai mengetik, jeda lalu mulai menghapus (jika ada beberapa teks)
          if (this.texts.length > 1) {
            this.isDeleting = true;
            this.timeoutId = window.setTimeout(
              () => this.type(),
              this.pauseTime
            );
          }
          // Jika hanya ada satu teks, tetap tampilkan tanpa menghapus
        }
      }
    }

    public destroy() {
      if (this.timeoutId) {
        clearTimeout(this.timeoutId);
      }
    }
  }

  // Inisialisasi semua efek mesin tik
  document.addEventListener("DOMContentLoaded", () => {
    const typewriterElements = document.querySelectorAll(".typewriter");
    typewriterElements.forEach((element) => {
      new TypewriterEffect(element as HTMLElement);
    });
  });

  // Dukungan untuk inisialisasi ulang saat pergantian halaman
  document.addEventListener("swup:contentReplaced", () => {
    const typewriterElements = document.querySelectorAll(".typewriter");
    typewriterElements.forEach((element) => {
      new TypewriterEffect(element as HTMLElement);
    });
  });
</script>

<style>
  .typewriter {
    position: relative;
  }

  .typewriter::after {
    content: "|";
    animation: blink 1s infinite;
    margin-left: 2px;
  }

  @keyframes blink {
    0%,
    50% {
      opacity: 1;
    }
    51%,
    100% {
      opacity: 0;
    }
  }
</style>